<?xml version="1.0" encoding="UTF-8"?>
<executionPlan name="GameVisualizationExcecutionPlan"
  statistics="disable" trace="disable" xmlns="http://wso2.org/carbon/eventprocessor">
  <description>This execution plan was created to generate streams which are needed for game-visualization (However, this execution plan is a sub-plan of Usecase1).</description>
  <siddhiConfiguration>
    <property name="siddhi.enable.distributed.processing">false</property>
    <property name="siddhi.persistence.snapshot.time.interval.minutes">0</property>
  </siddhiConfiguration>
  <importedStreams>
    <stream as="sensorStream" name="sensorStream" version="1.0.0"/>
  </importedStreams>
  <queryExpressions><![CDATA[from  sensorStream [ sid == '13' or sid == '14' or sid == '97' or sid == '98'] 
                    select 'Nick Gertje' as pid, 'A' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
from  sensorStream [ sid == '47' or sid == '16'] 
                    select 'Dennis Dotterweich' as pid, 'A' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
from  sensorStream [ sid == '49' or sid == '88'] 
                    select 'Niklas Waelzlein' as pid, 'A' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
from  sensorStream [ sid == '19' or sid == '52'] 
                    select 'Wili Sommer'  as pid, 'A' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
from  sensorStream [ sid == '53' or sid == '54'] 
                    select 'Philipp Harlass' as pid, 'A' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
					
from  sensorStream [ sid == '23' or sid == '24'] 
                    select 'Roman Hartleb' as pid, 'A' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
from  sensorStream [ sid == '57' or sid == '58']
                    select 'Erik Engelhardt' as pid, 'A' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
from  sensorStream [ sid == '59' or sid == '28'] 
                    select 'Sandro Schneider' as pid, 'A' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
					
					from  sensorStream [ sid == '61' or sid == '62' or sid == '99' or sid == '100'] 
                    select 'Leon Krapf'  as pid, 'B' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
					from  sensorStream [ sid == '63' or sid == '64'] 
                    select 'Kevin Baer'  as pid, 'B' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
					from  sensorStream [ sid == '65' or sid == '66'] 
                    select 'Luca Ziegler' as pid, 'B' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
					from  sensorStream [ sid == '67' or sid == '68'] 
                    select 'Ben Mueller' as pid, 'B' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
					from  sensorStream [ sid == '69' or sid == '38'] 
                    select 'Vale Reitstetter' as pid, 'B' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
					from  sensorStream [ sid == '71' or sid == '40'] 
                    select 'Christopher Lee' as pid, 'B' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					
					from  sensorStream [ sid == '73' or sid == '74'] 
                    select 'Leon Heinze' as pid, 'B' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
										
					from  sensorStream [ sid == '75' or sid == '44'] 
                    select 'Leo Langhans' as pid, 'B' as tid, ts, x, y, z, v, a, vx, vy, vz, ax, ay, az, sid, tsms 
                    insert into sensorIdentifiedStream;
					

from sensorIdentifiedStream[sid != '97' and sid != '98' and sid != '99' and sid != '100'] 
                select * insert into filteredSensorIdentifiedStream;

define partition initialPartition by filteredSensorIdentifiedStream.pid;
	
from filteredSensorIdentifiedStream#window.debs:normalizeSpeed('v','sid') 
	select pid,ts,x,y,z,v output last every 16 millisecond
	insert into playerIdentifiedStream for expired-events partition by initialPartition;

from playerIdentifiedStream
	select concat(pid,",",ts,",",x,",",y,",",z) as player_position
	insert into chartPlayerIdentifiedStream;  	]]></queryExpressions>
  <exportedStreams>
    <stream name="chartPlayerIdentifiedStream"
      valueOf="chartPlayerIdentifiedStream" version="1.0.0"/>
  </exportedStreams>
</executionPlan>
